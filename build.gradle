plugins {
	id 'org.springframework.boot' version '2.3.1.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'eclipse-wtp'
	id 'war'
}

// configuring basic information for this project 
group = 'com.ptsc.tcms'
version = '1.0.0'
sourceCompatibility = '1.8'

// setting encoding during compilation in Java and Test classes
compileJava.dependsOn('clearDist')
compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

// setting encoding during compilation in Java 
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

// setting encoding during compilation in Test classes
tasks.withType(Test) {
	systemProperty 'file.encoding', 'UTF-8'
}

// setting project facet, force to jdk 1.8 & servlet 4.0
eclipse {
    wtp {
        facet {
         	facet name: 'jst.java', version: '1.8'
            facet name: 'jst.web', version: '4.0'
        }
    }
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-ldap'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-mustache'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'com.microsoft.sqlserver:mssql-jdbc'
	implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'
	implementation group: 'commons-io', name: 'commons-io', version: '2.6'
	implementation group: 'org.apache.poi', name: 'poi', version: '4.1.0'
	implementation group: 'org.projectlombok', name: 'lombok', version: '1.18.10'
	annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.10'
	testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.10'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

test {
	useJUnitPlatform()
}

task clearDist() {
	delete "$buildDir/libs"
}

// creating build tasks by runtime environment profiles, e.g. application-dev.yml or application-sit.yml
fileTree("src/main/resources") {
    include "application-*.yml"
}.each { file ->
	def propertyName = file.name
	String envName = propertyName.substring(12, propertyName.lastIndexOf(".yml"))
	task "build_${envName}"(dependsOn : ['build']) {
		group = 'build'
		description = "Assembles and tests this project for ${envName}"
    }
     task "bootRun_${envName}"(dependsOn : ['bootRun']) {
		group = 'application'
		description = "Runs this project as a Spring Boot application for ${envName}"
    }
}

// reslove environment by build task name e.g. dev/test/prod
ext.getRuntimeEnvironment = { ->
    try {
    	def envName = ''
		def taskName = getTaskName().split('_')
		if (taskName == null || 
			(taskName?.length == 1 && taskName?.getAt(0) == 'bootRun') || 
			(taskName?.length == 1 && taskName?.getAt(0) == 'build')) {
			println '[WARN] Set envName = dev, first task > ' + project.gradle.startParameter.taskNames
			envName = 'dev'
		} else {
			def l = taskName?.length - 1
			envName = taskName?.getAt(l)
		}
		return envName
    } catch (ignored) {
        return null;
    }
}

// reslove first execute task name
ext.getTaskName = { ->
	return project.gradle.startParameter.taskNames[0]? project.gradle.startParameter.taskNames[0] : ''
}

// ignore config files before execute any build/bootRun task
processResources {
	def envName = getRuntimeEnvironment()
	exclude { f -> 
		if (f.name.matches("application-(.*).yml") && !f.name.matches("application-${envName}.yml"))
    		return f
		if (f.name.matches("logback-(.*).xml") && !f.name.matches("logback-${envName}.xml")) 
    		return f
		if (f.name.matches("spring-database-(.*).properties") && !f.name.matches("spring-database-${envName}.properties"))
    		return f
		if (f.name.matches("spring-database-(.*).xml") && !f.name.matches("spring-database-${envName}.xml"))
    		return f
	}
}

bootRun {
	def envName = getRuntimeEnvironment()
	jvmArgs = ["-Dspring.profiles.active=${envName}"]
}

bootWar {
	def envName = getRuntimeEnvironment()
	archiveBaseName = "ptsc.tcms.boot-${envName}"
	//archiveName = "TCMS.war"
	doFirst{
    	rootSpec.exclude{ f ->
    		if (f.name.matches("log4j-(.*).jar")) {
    			return f
			}
    	}
    }
}

war {
	def envName = getRuntimeEnvironment()
	enabled = true
    //archiveBaseName = "ptsc.tcms-${envName}"
    archiveName = "TCMS.war"
    doFirst{
    	rootSpec.exclude{ f -> 
			if (f.name.matches("tomcat-(.*).jar") || 
				f.name.matches("log4j-(.*).jar")) {
				return f
			}
    	}
    }
}

